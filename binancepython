# use for environment variables
import os
# needed for the binance API and websockets
from binance.client import Client
# used for dates
from datetime import datetime, timedelta
import time
# tqdm not necessary, is only used for showing progress during klines iteration
from tqdm import tqdm

# used to repeatedly execute the code
from itertools import count
# used to store trades and sell assets
import json

user_key = "xx"
secret_key = "xx"

from binance import Client, ThreadedWebsocketManager, ThreadedDepthCacheManager
client = Client("xx", "xx")
binance_client = Client(user_key, secret_key)

# select what to pair the coins to and pull all coins paied with PAIR_WITH
PAIR_WITH = "USDT"
# Define the size of each trade, by default in USDT
QUANTITY = 20
# List of pairs to exlcude
# by default we’re excluding the most popular fiat pairs
# and some margin keywords, as we’re only working on the SPOT account
FIATS = ["EURUSDT", "GBPUSDT", "JPYUSDT", "USDUSDT", "DOWN", "UP"]
# the amount of time in MINUTES to calculate the differnce from the current price
TIME_DIFFERENCE = 5
# the difference in % between the first and second checks for the price, by default set at 10 minutes apart.
CHANGE_IN_PRICE = 3
# define in % when to sell a coin that’s not making a profit
STOP_LOSS = 1
# define in % when to take profit on a profitable coin
TAKE_PROFIT = 10

def get_price():
 #Return the current price for all coins on binance
  initial_price = {}
  prices = client.get_all_tickers()
  for coin in prices:
# only Return USDT pairs and exlcude margin symbols like BTCDOWNUSDT
    if PAIR_WITH in coin["symbol"] and all(item not in coin["symbol"] for item in FIATS):
      initial_price[coin["symbol"]] = { "price": coin["price"], "time": datetime.now()}
  return initial_price

print(get_price())

def multiple_klines(quote_currency: str) -> dict:
    klines = {}

    # You don't need API key/secret for this type of requets
    
    binance_client = Client(user_key, secret_key)


    # Extract trading pairs from exchange information
    exchange_info = client.get_exchange_info()
    symbols = [x['symbol'] for x in exchange_info['symbols']]

    # Filter list
    selected_symbols = list(filter(lambda x: x.endswith(quote_currency), symbols))

    # Iterate over filtered list of trading pairs
    for symbol in tqdm(selected_symbols):
        klines[symbol] = client.get_historical_klines(
            symbol, interval='1d', limit=1)

        # Prevent exceeding rate limit:
        if int(client.response.headers['x-mbx-used-weight-1m']) > 1_000:
            print('Pausing for 30 seconds...')
            time.sleep(30)

    return klines

klines_dict = multiple_klines('USDT')

def check_below():
  initial_price = get_price()
 
  # calculate the difference between the first and last price reads
  
  for coin in initial_price:
    if initial_price[coin]["price"]>=klines_dict[coin]["price"]: 
      print(initial_price[coin]["price"])

